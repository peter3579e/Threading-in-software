#include <pthread.h>
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#define NUM_THREADS 2

int e, f, lines, columns, *Matrix1;

unsigned int  c[20][20]={};


void *hello1(void *arg)
{
for (int i = 0; i < 20; i++)
{
    for (int j = 0; j < 20; j++)
    {
        c [i][j]= 0;
        for (int k = 0; k <20; k++)
        {
            c[i][j]=c[i][j]+ (*(Matrix1+20*i+k))*(*(Matrix1+j+20*k));
        }
        //printf("%4d ",c[i][j]);
    }
    //printf("\n");
}
    return 0;
}


/*
void *hello2(void *arg)
{
for (int i = 2; i <4 ; i++)
{
    for (int j = 0; j < 4; j++)
    {
        c [i][j]= 0;
        for (int k = 0; k <4; k++)
        {
            c[i][j]=c[i][j]+ (*(Matrix1+4*i+k))*(*(Matrix1+j+4*k));
        }
        //printf("%4d ",c[i][j]);
    }
    //printf("\n");
}
    return 0;
}


void *hello3(void *arg)
{
    for (int i = 2; i <3 ; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            c [i][j]= 0;
            for (int k = 0; k <4; k++)
            {
                c[i][j]=c[i][j]+ (*(Matrix1+4*i+k))*(*(Matrix1+j+4*k));
            }
            //printf("%4d ",c[i][j]);
        }
        //printf("\n");
    }
    return 0;
}


void *hello4(void *arg)
{
    for (int i = 3; i <4 ; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            c [i][j]= 0;
            for (int k = 0; k <4; k++)
            {
                c[i][j]=c[i][j]+ (*(Matrix1+4*i+k))*(*(Matrix1+j+4*k));
            }
            printf("%4d ",c[i][j]);
        }
        printf("\n");
    }
    return 0;
}


void *hello5(void *arg)
{
    for (int i = 560; i <700 ; i++)
    {
        for (int j = 0; j < 1000; j++)
        {
            c [i][j]= 0;
            for (int k = 0; k <1000; k++)
            {
                c[i][j]=c[i][j]+ (*(Matrix1+4*i+k))*(*(Matrix1+j+4*k));
            }
            printf("%4d ",c[i][j]);
        }
        printf("\n");
    }
    return 0;
}

void *hello6(void *arg)
{
    for (int i = 700; i <840 ; i++)
    {
        for (int j = 0; j < 1000; j++)
        {
            c [i][j]= 0;
            for (int k = 0; k <1000; k++)
            {
                c[i][j]=c[i][j]+ (*(Matrix1+4*i+k))*(*(Matrix1+j+4*k));
            }
            printf("%4d ",c[i][j]);
        }
        printf("\n");
    }
    return 0;
}

void *hello7(void *arg)
{
    for (int i = 840; i <1000 ; i++)
    {
        for (int j = 0; j < 1000; j++)
        {
            c [i][j]= 0;
            for (int k = 0; k <1000; k++)
            {
                c[i][j]=c[i][j]+ (*(Matrix1+4*i+k))*(*(Matrix1+j+4*k));
            }
            printf("%4d ",c[i][j]);
        }
        printf("\n");
    }
    return 0;
}
*/

int main(void)
{
    
    

    //Matrix 1
    printf ("Type the matrix lines:\t");
    scanf ("%d", &lines);
    printf ("Type the matrix columns:\t");
    scanf ("%d", &columns);
    Matrix1 = (int *)malloc(lines * columns * sizeof(int));
    //Matrix2 = (int *)malloc(lines * columns * sizeof(int));
    
    for (e = 0; e  <  lines; e++)
    {
        for (f =0 ; f < columns; f++)
        {
            *(Matrix1+e*columns+f)=e*columns+f;
            //printf("%4d ",*(Matrix1+e*columns+f));
        }
        //printf("\n");
    }
    
    
    
    
    //Matrix 2
    /*
    printf ("Type the matrix lines:\t");
    scanf ("%d", &lines);
    printf ("Type the matrix columns:\t");
    scanf ("%d", &columns);
    for (e = 0; e  <  lines; e++)
    {
        for (f =0 ; f < columns; f++)
        {
            *(Matrix2+e*columns+f)=e*columns+f;
            printf("%4d ",*(Matrix2+e*columns+f));
        }
        printf("\n");
    }
    */
    
    printf("\n");
    
    
    time_t time= clock();
    //threads
    pthread_t tid[NUM_THREADS];
    
    pthread_create(&tid[0],NULL,hello1,NULL);
    
    //pthread_create(&tid[1],NULL,hello2,NULL);
    
    //pthread_create(&tid[2],NULL,hello3,NULL);
    
    //pthread_create(&tid[3],NULL,hello4,NULL);
    
    //pthread_create(&tid[4],NULL,hello5,NULL);
    
    //pthread_create(&tid[5],NULL,hello6,NULL);
    
    for(int i=0;i<NUM_THREADS;i++)
        pthread_join(tid[i],NULL);
    
    
    time = clock() - time;
    printf("Exetution time: %4f Sec \n", ((double)time) / CLOCKS_PER_SEC);
    //printf("%.4f\n", (double)(time(NULL) - start));
    //pthread_exit(NULL);
     //printf("\n");
    
    /*
    //print matrix
    for (int i = 0; i <1000; i++)
        
    {
        for(int j=0; j< 1000; j++)
            printf("%4d   ",c[i][j]);
        printf("\n");
    }
     */
     
//return 0;
    
}
